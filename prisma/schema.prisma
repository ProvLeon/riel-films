// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Film {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String   @unique
  category        String
  year            String
  description     String
  longDescription String
  image           String
  director        String
  producer        String
  duration        String
  languages       String[]
  subtitles       String[]
  releaseDate     String
  awards          String[]
  castCrew        Json[]
  gallery         String[]
  trailer         String
  synopsis        String
  quotes          Json[]
  rating          Float
  featured        Boolean  @default(false) // Add this field
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Add index for featured field to optimize queries
  @@index([featured])
  @@index([category, year])
  @@index([createdAt])
}

model Production {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  slug                String   @unique // Already indexed as unique
  category            String
  status              String
  description         String
  longDescription     String
  image               String
  progress            Int
  director            String
  producer            String
  cinematographer     String
  editor              String
  timeline            String
  startDate           String
  estimatedCompletion String
  locations           String[]
  logline             String
  synopsis            String
  team                Json[]
  updates             Json[]
  stages              Json[]
  supportOptions      Json[]
  faq                 Json[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  // Remove fulltext index as it's not supported

  // Add indexes for common query patterns
  @@index([status])
  @@index([category, status])
  @@index([createdAt])
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  slug      String   @unique // Already indexed as unique
  excerpt   String
  content   Json[]
  author    String
  date      DateTime
  image     String
  category  String
  readTime  String
  featured  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Add indexes for common query patterns
  @@index([category])
  @@index([featured])
  @@index([date])
  @@index([createdAt])
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String         @unique // Already indexed as unique
  password     String?
  image        String?
  googleId     String?        @unique // Already indexed as unique
  role         String         @default("editor")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]

  // Add index for role-based queries
  @@index([role])
  // Add index for name searches
  @@index([name])
}

model Settings {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  siteName        String
  siteDescription String
  contactEmail    String
  contactPhone    String
  socialLinks     Json[]
  logoLight       String
  logoDark        String
  metaImage       String
  updatedAt       DateTime @updatedAt
}

model Analytics {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  pageUrl     String
  pageType    String // film, production, story, home, etc.
  itemId      String? // Optional reference to specific content item
  event       String // view, click, etc.
  timestamp   DateTime @default(now())
  referrer    String?
  userAgent   String?
  ipHash      String? // Hashed IP for privacy
  sessionId   String? // Track session
  visitorId   String? // Unique visitor ID
  isNewUser   Boolean  @default(false) // Flag for new users
  scrollDepth Int? // How far user scrolled
  timeOnPage  Int? // Seconds on page
  screenData  Json? // Screen/viewport information
  extraData   Json? // Any additional event data

  @@index([pageType, timestamp])
  @@index([event, timestamp])
  @@index([itemId])
  @@index([visitorId, timestamp])
  @@index([sessionId])
  @@index([visitorId, pageType])
}

model DailyStats {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  date               DateTime @unique
  pageViews          Int      @default(0)
  uniqueVisitors     Int      @default(0)
  newVisitors        Int      @default(0) // First time visitors
  filmViews          Int      @default(0)
  storyViews         Int      @default(0)
  productionViews    Int      @default(0)
  engagements        Int      @default(0)
  avgTimeOnSite      Float    @default(0) // Average time in seconds
  bounceRate         Float    @default(0) // Single page visit percentage
  returningVisitors  Int      @default(0) // Returning visitors
  avgEngagementScore Float    @default(0) // Overall engagement score (0-100)
}

// New model to track visitor history for better analytics
model Visitor {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  visitorId         String   @unique // Cookie-based ID
  firstSeen         DateTime @default(now())
  lastSeen          DateTime @default(now())
  totalVisits       Int      @default(1)
  totalSessions     Int      @default(1)
  browser           String?
  device            String?
  os                String?
  country           String?
  preferredContent  String? // Most viewed content type
  engagementScore   Float? // Overall engagement score
  averageTimeOnSite Float? // Average time per visit in seconds

  @@index([lastSeen])
}

model Subscriber {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  name           String?
  subscribed     Boolean   @default(true)
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime? // Add this field
  lastEmailSent  DateTime?
  interests      String[]  @default([])
  source         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([subscribed])
}

model Campaign {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  subject           String
  content           String? // Store HTML content or a template reference
  filter            Json? // Audience filter used { interests: [...] }
  status            String // e.g., draft, sending, sent, failed, partial_failure
  sentAt            DateTime?
  scheduledAt       DateTime? // If scheduling is implemented later
  recipientCount    Int // Total targeted count
  deliveredCount    Int?      @default(0) // Requires webhook integration
  openedCount       Int?      @default(0) // Requires webhook integration
  clickedCount      Int?      @default(0) // Requires webhook integration
  bouncedCount      Int?      @default(0) // Requires webhook integration
  complaintCount    Int?      @default(0) // Requires webhook integration
  unsubscribedCount Int?      @default(0) // Requires webhook integration
  createdAt         DateTime  @default(now())
  createdBy         String // User ID of admin/editor

  @@index([status, createdAt])
  @@index([createdBy])
}

model Notification {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId // To whom the notification belongs
  message         String // The notification text
  type            String // e.g., 'activity', 'system_update', 'new_content'
  read            Boolean  @default(false) // Read status
  timestamp       DateTime @default(now())
  relatedItemId   String? // Optional link to Film, Story, Production, User ID
  relatedItemType String? // 'film', 'story', 'production', 'user' etc.
  link            String? // Optional direct link if needed

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User

  @@index([userId, read, timestamp])
  @@index([timestamp])
}
